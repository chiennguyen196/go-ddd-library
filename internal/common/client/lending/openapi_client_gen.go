// Package lending provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package lending

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	openapi_types "github.com/deepmap/oapi-codegen/pkg/types"
)

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// ReturnBook request
	ReturnBook(ctx context.Context, bookId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Checkout request with any body
	CheckoutWithBody(ctx context.Context, patronId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	Checkout(ctx context.Context, patronId openapi_types.UUID, body CheckoutJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CancelHold request with any body
	CancelHoldWithBody(ctx context.Context, patronId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CancelHold(ctx context.Context, patronId openapi_types.UUID, body CancelHoldJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PlaceHold request with any body
	PlaceHoldWithBody(ctx context.Context, patronId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PlaceHold(ctx context.Context, patronId openapi_types.UUID, body PlaceHoldJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPatronProfile request
	GetPatronProfile(ctx context.Context, patronId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) ReturnBook(ctx context.Context, bookId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReturnBookRequest(c.Server, bookId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CheckoutWithBody(ctx context.Context, patronId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCheckoutRequestWithBody(c.Server, patronId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Checkout(ctx context.Context, patronId openapi_types.UUID, body CheckoutJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCheckoutRequest(c.Server, patronId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CancelHoldWithBody(ctx context.Context, patronId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCancelHoldRequestWithBody(c.Server, patronId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CancelHold(ctx context.Context, patronId openapi_types.UUID, body CancelHoldJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCancelHoldRequest(c.Server, patronId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PlaceHoldWithBody(ctx context.Context, patronId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPlaceHoldRequestWithBody(c.Server, patronId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PlaceHold(ctx context.Context, patronId openapi_types.UUID, body PlaceHoldJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPlaceHoldRequest(c.Server, patronId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPatronProfile(ctx context.Context, patronId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPatronProfileRequest(c.Server, patronId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewReturnBookRequest generates requests for ReturnBook
func NewReturnBookRequest(server string, bookId openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "bookId", runtime.ParamLocationPath, bookId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/books/%s/return", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCheckoutRequest calls the generic Checkout builder with application/json body
func NewCheckoutRequest(server string, patronId openapi_types.UUID, body CheckoutJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCheckoutRequestWithBody(server, patronId, "application/json", bodyReader)
}

// NewCheckoutRequestWithBody generates requests for Checkout with any type of body
func NewCheckoutRequestWithBody(server string, patronId openapi_types.UUID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "patronId", runtime.ParamLocationPath, patronId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/patrons/%s/checkout", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCancelHoldRequest calls the generic CancelHold builder with application/json body
func NewCancelHoldRequest(server string, patronId openapi_types.UUID, body CancelHoldJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCancelHoldRequestWithBody(server, patronId, "application/json", bodyReader)
}

// NewCancelHoldRequestWithBody generates requests for CancelHold with any type of body
func NewCancelHoldRequestWithBody(server string, patronId openapi_types.UUID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "patronId", runtime.ParamLocationPath, patronId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/patrons/%s/holds", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPlaceHoldRequest calls the generic PlaceHold builder with application/json body
func NewPlaceHoldRequest(server string, patronId openapi_types.UUID, body PlaceHoldJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPlaceHoldRequestWithBody(server, patronId, "application/json", bodyReader)
}

// NewPlaceHoldRequestWithBody generates requests for PlaceHold with any type of body
func NewPlaceHoldRequestWithBody(server string, patronId openapi_types.UUID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "patronId", runtime.ParamLocationPath, patronId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/patrons/%s/holds", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetPatronProfileRequest generates requests for GetPatronProfile
func NewGetPatronProfileRequest(server string, patronId openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "patronId", runtime.ParamLocationPath, patronId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/patrons/%s/profile", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// ReturnBook request
	ReturnBookWithResponse(ctx context.Context, bookId openapi_types.UUID, reqEditors ...RequestEditorFn) (*ReturnBookResponse, error)

	// Checkout request with any body
	CheckoutWithBodyWithResponse(ctx context.Context, patronId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CheckoutResponse, error)

	CheckoutWithResponse(ctx context.Context, patronId openapi_types.UUID, body CheckoutJSONRequestBody, reqEditors ...RequestEditorFn) (*CheckoutResponse, error)

	// CancelHold request with any body
	CancelHoldWithBodyWithResponse(ctx context.Context, patronId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CancelHoldResponse, error)

	CancelHoldWithResponse(ctx context.Context, patronId openapi_types.UUID, body CancelHoldJSONRequestBody, reqEditors ...RequestEditorFn) (*CancelHoldResponse, error)

	// PlaceHold request with any body
	PlaceHoldWithBodyWithResponse(ctx context.Context, patronId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PlaceHoldResponse, error)

	PlaceHoldWithResponse(ctx context.Context, patronId openapi_types.UUID, body PlaceHoldJSONRequestBody, reqEditors ...RequestEditorFn) (*PlaceHoldResponse, error)

	// GetPatronProfile request
	GetPatronProfileWithResponse(ctx context.Context, patronId openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetPatronProfileResponse, error)
}

type ReturnBookResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *BaseResponse
}

// Status returns HTTPResponse.Status
func (r ReturnBookResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReturnBookResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CheckoutResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *BaseResponse
}

// Status returns HTTPResponse.Status
func (r CheckoutResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CheckoutResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CancelHoldResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *BaseResponse
}

// Status returns HTTPResponse.Status
func (r CancelHoldResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CancelHoldResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PlaceHoldResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *BaseResponse
}

// Status returns HTTPResponse.Status
func (r PlaceHoldResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PlaceHoldResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPatronProfileResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Code string `json:"code"`
		Data struct {
			PatronProfile PatronProfile `json:"patronProfile"`
		} `json:"data"`
		Message string `json:"message"`
	}
}

// Status returns HTTPResponse.Status
func (r GetPatronProfileResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPatronProfileResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// ReturnBookWithResponse request returning *ReturnBookResponse
func (c *ClientWithResponses) ReturnBookWithResponse(ctx context.Context, bookId openapi_types.UUID, reqEditors ...RequestEditorFn) (*ReturnBookResponse, error) {
	rsp, err := c.ReturnBook(ctx, bookId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReturnBookResponse(rsp)
}

// CheckoutWithBodyWithResponse request with arbitrary body returning *CheckoutResponse
func (c *ClientWithResponses) CheckoutWithBodyWithResponse(ctx context.Context, patronId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CheckoutResponse, error) {
	rsp, err := c.CheckoutWithBody(ctx, patronId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCheckoutResponse(rsp)
}

func (c *ClientWithResponses) CheckoutWithResponse(ctx context.Context, patronId openapi_types.UUID, body CheckoutJSONRequestBody, reqEditors ...RequestEditorFn) (*CheckoutResponse, error) {
	rsp, err := c.Checkout(ctx, patronId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCheckoutResponse(rsp)
}

// CancelHoldWithBodyWithResponse request with arbitrary body returning *CancelHoldResponse
func (c *ClientWithResponses) CancelHoldWithBodyWithResponse(ctx context.Context, patronId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CancelHoldResponse, error) {
	rsp, err := c.CancelHoldWithBody(ctx, patronId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCancelHoldResponse(rsp)
}

func (c *ClientWithResponses) CancelHoldWithResponse(ctx context.Context, patronId openapi_types.UUID, body CancelHoldJSONRequestBody, reqEditors ...RequestEditorFn) (*CancelHoldResponse, error) {
	rsp, err := c.CancelHold(ctx, patronId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCancelHoldResponse(rsp)
}

// PlaceHoldWithBodyWithResponse request with arbitrary body returning *PlaceHoldResponse
func (c *ClientWithResponses) PlaceHoldWithBodyWithResponse(ctx context.Context, patronId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PlaceHoldResponse, error) {
	rsp, err := c.PlaceHoldWithBody(ctx, patronId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePlaceHoldResponse(rsp)
}

func (c *ClientWithResponses) PlaceHoldWithResponse(ctx context.Context, patronId openapi_types.UUID, body PlaceHoldJSONRequestBody, reqEditors ...RequestEditorFn) (*PlaceHoldResponse, error) {
	rsp, err := c.PlaceHold(ctx, patronId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePlaceHoldResponse(rsp)
}

// GetPatronProfileWithResponse request returning *GetPatronProfileResponse
func (c *ClientWithResponses) GetPatronProfileWithResponse(ctx context.Context, patronId openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetPatronProfileResponse, error) {
	rsp, err := c.GetPatronProfile(ctx, patronId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPatronProfileResponse(rsp)
}

// ParseReturnBookResponse parses an HTTP response from a ReturnBookWithResponse call
func ParseReturnBookResponse(rsp *http.Response) (*ReturnBookResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ReturnBookResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BaseResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCheckoutResponse parses an HTTP response from a CheckoutWithResponse call
func ParseCheckoutResponse(rsp *http.Response) (*CheckoutResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CheckoutResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BaseResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCancelHoldResponse parses an HTTP response from a CancelHoldWithResponse call
func ParseCancelHoldResponse(rsp *http.Response) (*CancelHoldResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CancelHoldResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BaseResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePlaceHoldResponse parses an HTTP response from a PlaceHoldWithResponse call
func ParsePlaceHoldResponse(rsp *http.Response) (*PlaceHoldResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PlaceHoldResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BaseResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetPatronProfileResponse parses an HTTP response from a GetPatronProfileWithResponse call
func ParseGetPatronProfileResponse(rsp *http.Response) (*GetPatronProfileResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPatronProfileResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Code string `json:"code"`
			Data struct {
				PatronProfile PatronProfile `json:"patronProfile"`
			} `json:"data"`
			Message string `json:"message"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}
