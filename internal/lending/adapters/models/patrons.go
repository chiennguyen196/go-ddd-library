// Code generated by SQLBoiler 4.14.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Patron is an object representing the database table.
type Patron struct {
	ID         string     `boil:"id" json:"id" toml:"id" yaml:"id"`
	PatronType PatronType `boil:"patron_type" json:"patron_type" toml:"patron_type" yaml:"patron_type"`
	CreatedAt  time.Time  `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt  time.Time  `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	DeletedAt  null.Time  `boil:"deleted_at" json:"deleted_at,omitempty" toml:"deleted_at" yaml:"deleted_at,omitempty"`

	R *patronR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L patronL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var PatronColumns = struct {
	ID         string
	PatronType string
	CreatedAt  string
	UpdatedAt  string
	DeletedAt  string
}{
	ID:         "id",
	PatronType: "patron_type",
	CreatedAt:  "created_at",
	UpdatedAt:  "updated_at",
	DeletedAt:  "deleted_at",
}

var PatronTableColumns = struct {
	ID         string
	PatronType string
	CreatedAt  string
	UpdatedAt  string
	DeletedAt  string
}{
	ID:         "patrons.id",
	PatronType: "patrons.patron_type",
	CreatedAt:  "patrons.created_at",
	UpdatedAt:  "patrons.updated_at",
	DeletedAt:  "patrons.deleted_at",
}

// Generated where

type whereHelperPatronType struct{ field string }

func (w whereHelperPatronType) EQ(x PatronType) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelperPatronType) NEQ(x PatronType) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelperPatronType) LT(x PatronType) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelperPatronType) LTE(x PatronType) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelperPatronType) GT(x PatronType) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelperPatronType) GTE(x PatronType) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelperPatronType) IN(slice []PatronType) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperPatronType) NIN(slice []PatronType) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

var PatronWhere = struct {
	ID         whereHelperstring
	PatronType whereHelperPatronType
	CreatedAt  whereHelpertime_Time
	UpdatedAt  whereHelpertime_Time
	DeletedAt  whereHelpernull_Time
}{
	ID:         whereHelperstring{field: "\"patrons\".\"id\""},
	PatronType: whereHelperPatronType{field: "\"patrons\".\"patron_type\""},
	CreatedAt:  whereHelpertime_Time{field: "\"patrons\".\"created_at\""},
	UpdatedAt:  whereHelpertime_Time{field: "\"patrons\".\"updated_at\""},
	DeletedAt:  whereHelpernull_Time{field: "\"patrons\".\"deleted_at\""},
}

// PatronRels is where relationship names are stored.
var PatronRels = struct {
	Holds            string
	OverdueCheckouts string
}{
	Holds:            "Holds",
	OverdueCheckouts: "OverdueCheckouts",
}

// patronR is where relationships are stored.
type patronR struct {
	Holds            HoldSlice            `boil:"Holds" json:"Holds" toml:"Holds" yaml:"Holds"`
	OverdueCheckouts OverdueCheckoutSlice `boil:"OverdueCheckouts" json:"OverdueCheckouts" toml:"OverdueCheckouts" yaml:"OverdueCheckouts"`
}

// NewStruct creates a new relationship struct
func (*patronR) NewStruct() *patronR {
	return &patronR{}
}

func (r *patronR) GetHolds() HoldSlice {
	if r == nil {
		return nil
	}
	return r.Holds
}

func (r *patronR) GetOverdueCheckouts() OverdueCheckoutSlice {
	if r == nil {
		return nil
	}
	return r.OverdueCheckouts
}

// patronL is where Load methods for each relationship are stored.
type patronL struct{}

var (
	patronAllColumns            = []string{"id", "patron_type", "created_at", "updated_at", "deleted_at"}
	patronColumnsWithoutDefault = []string{"id", "patron_type"}
	patronColumnsWithDefault    = []string{"created_at", "updated_at", "deleted_at"}
	patronPrimaryKeyColumns     = []string{"id"}
	patronGeneratedColumns      = []string{}
)

type (
	// PatronSlice is an alias for a slice of pointers to Patron.
	// This should almost always be used instead of []Patron.
	PatronSlice []*Patron
	// PatronHook is the signature for custom Patron hook methods
	PatronHook func(context.Context, boil.ContextExecutor, *Patron) error

	patronQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	patronType                 = reflect.TypeOf(&Patron{})
	patronMapping              = queries.MakeStructMapping(patronType)
	patronPrimaryKeyMapping, _ = queries.BindMapping(patronType, patronMapping, patronPrimaryKeyColumns)
	patronInsertCacheMut       sync.RWMutex
	patronInsertCache          = make(map[string]insertCache)
	patronUpdateCacheMut       sync.RWMutex
	patronUpdateCache          = make(map[string]updateCache)
	patronUpsertCacheMut       sync.RWMutex
	patronUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var patronAfterSelectHooks []PatronHook

var patronBeforeInsertHooks []PatronHook
var patronAfterInsertHooks []PatronHook

var patronBeforeUpdateHooks []PatronHook
var patronAfterUpdateHooks []PatronHook

var patronBeforeDeleteHooks []PatronHook
var patronAfterDeleteHooks []PatronHook

var patronBeforeUpsertHooks []PatronHook
var patronAfterUpsertHooks []PatronHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Patron) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range patronAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Patron) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range patronBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Patron) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range patronAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Patron) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range patronBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Patron) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range patronAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Patron) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range patronBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Patron) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range patronAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Patron) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range patronBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Patron) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range patronAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddPatronHook registers your hook function for all future operations.
func AddPatronHook(hookPoint boil.HookPoint, patronHook PatronHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		patronAfterSelectHooks = append(patronAfterSelectHooks, patronHook)
	case boil.BeforeInsertHook:
		patronBeforeInsertHooks = append(patronBeforeInsertHooks, patronHook)
	case boil.AfterInsertHook:
		patronAfterInsertHooks = append(patronAfterInsertHooks, patronHook)
	case boil.BeforeUpdateHook:
		patronBeforeUpdateHooks = append(patronBeforeUpdateHooks, patronHook)
	case boil.AfterUpdateHook:
		patronAfterUpdateHooks = append(patronAfterUpdateHooks, patronHook)
	case boil.BeforeDeleteHook:
		patronBeforeDeleteHooks = append(patronBeforeDeleteHooks, patronHook)
	case boil.AfterDeleteHook:
		patronAfterDeleteHooks = append(patronAfterDeleteHooks, patronHook)
	case boil.BeforeUpsertHook:
		patronBeforeUpsertHooks = append(patronBeforeUpsertHooks, patronHook)
	case boil.AfterUpsertHook:
		patronAfterUpsertHooks = append(patronAfterUpsertHooks, patronHook)
	}
}

// One returns a single patron record from the query.
func (q patronQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Patron, error) {
	o := &Patron{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for patrons")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Patron records from the query.
func (q patronQuery) All(ctx context.Context, exec boil.ContextExecutor) (PatronSlice, error) {
	var o []*Patron

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Patron slice")
	}

	if len(patronAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Patron records in the query.
func (q patronQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count patrons rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q patronQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if patrons exists")
	}

	return count > 0, nil
}

// Holds retrieves all the hold's Holds with an executor.
func (o *Patron) Holds(mods ...qm.QueryMod) holdQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"holds\".\"patron_id\"=?", o.ID),
	)

	return Holds(queryMods...)
}

// OverdueCheckouts retrieves all the overdue_checkout's OverdueCheckouts with an executor.
func (o *Patron) OverdueCheckouts(mods ...qm.QueryMod) overdueCheckoutQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"overdue_checkouts\".\"patron_id\"=?", o.ID),
	)

	return OverdueCheckouts(queryMods...)
}

// LoadHolds allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (patronL) LoadHolds(ctx context.Context, e boil.ContextExecutor, singular bool, maybePatron interface{}, mods queries.Applicator) error {
	var slice []*Patron
	var object *Patron

	if singular {
		var ok bool
		object, ok = maybePatron.(*Patron)
		if !ok {
			object = new(Patron)
			ok = queries.SetFromEmbeddedStruct(&object, &maybePatron)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybePatron))
			}
		}
	} else {
		s, ok := maybePatron.(*[]*Patron)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybePatron)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybePatron))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &patronR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &patronR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`holds`),
		qm.WhereIn(`holds.patron_id in ?`, args...),
		qmhelper.WhereIsNull(`holds.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load holds")
	}

	var resultSlice []*Hold
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice holds")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on holds")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for holds")
	}

	if len(holdAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Holds = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &holdR{}
			}
			foreign.R.Patron = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.PatronID {
				local.R.Holds = append(local.R.Holds, foreign)
				if foreign.R == nil {
					foreign.R = &holdR{}
				}
				foreign.R.Patron = local
				break
			}
		}
	}

	return nil
}

// LoadOverdueCheckouts allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (patronL) LoadOverdueCheckouts(ctx context.Context, e boil.ContextExecutor, singular bool, maybePatron interface{}, mods queries.Applicator) error {
	var slice []*Patron
	var object *Patron

	if singular {
		var ok bool
		object, ok = maybePatron.(*Patron)
		if !ok {
			object = new(Patron)
			ok = queries.SetFromEmbeddedStruct(&object, &maybePatron)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybePatron))
			}
		}
	} else {
		s, ok := maybePatron.(*[]*Patron)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybePatron)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybePatron))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &patronR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &patronR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`overdue_checkouts`),
		qm.WhereIn(`overdue_checkouts.patron_id in ?`, args...),
		qmhelper.WhereIsNull(`overdue_checkouts.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load overdue_checkouts")
	}

	var resultSlice []*OverdueCheckout
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice overdue_checkouts")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on overdue_checkouts")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for overdue_checkouts")
	}

	if len(overdueCheckoutAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.OverdueCheckouts = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &overdueCheckoutR{}
			}
			foreign.R.Patron = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.PatronID {
				local.R.OverdueCheckouts = append(local.R.OverdueCheckouts, foreign)
				if foreign.R == nil {
					foreign.R = &overdueCheckoutR{}
				}
				foreign.R.Patron = local
				break
			}
		}
	}

	return nil
}

// AddHolds adds the given related objects to the existing relationships
// of the patron, optionally inserting them as new records.
// Appends related to o.R.Holds.
// Sets related.R.Patron appropriately.
func (o *Patron) AddHolds(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Hold) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.PatronID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"holds\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"patron_id"}),
				strmangle.WhereClause("\"", "\"", 2, holdPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.PatronID = o.ID
		}
	}

	if o.R == nil {
		o.R = &patronR{
			Holds: related,
		}
	} else {
		o.R.Holds = append(o.R.Holds, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &holdR{
				Patron: o,
			}
		} else {
			rel.R.Patron = o
		}
	}
	return nil
}

// AddOverdueCheckouts adds the given related objects to the existing relationships
// of the patron, optionally inserting them as new records.
// Appends related to o.R.OverdueCheckouts.
// Sets related.R.Patron appropriately.
func (o *Patron) AddOverdueCheckouts(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*OverdueCheckout) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.PatronID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"overdue_checkouts\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"patron_id"}),
				strmangle.WhereClause("\"", "\"", 2, overdueCheckoutPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.PatronID = o.ID
		}
	}

	if o.R == nil {
		o.R = &patronR{
			OverdueCheckouts: related,
		}
	} else {
		o.R.OverdueCheckouts = append(o.R.OverdueCheckouts, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &overdueCheckoutR{
				Patron: o,
			}
		} else {
			rel.R.Patron = o
		}
	}
	return nil
}

// Patrons retrieves all the records using an executor.
func Patrons(mods ...qm.QueryMod) patronQuery {
	mods = append(mods, qm.From("\"patrons\""), qmhelper.WhereIsNull("\"patrons\".\"deleted_at\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"patrons\".*"})
	}

	return patronQuery{q}
}

// FindPatron retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindPatron(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*Patron, error) {
	patronObj := &Patron{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"patrons\" where \"id\"=$1 and \"deleted_at\" is null", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, patronObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from patrons")
	}

	if err = patronObj.doAfterSelectHooks(ctx, exec); err != nil {
		return patronObj, err
	}

	return patronObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Patron) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no patrons provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(patronColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	patronInsertCacheMut.RLock()
	cache, cached := patronInsertCache[key]
	patronInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			patronAllColumns,
			patronColumnsWithDefault,
			patronColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(patronType, patronMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(patronType, patronMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"patrons\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"patrons\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into patrons")
	}

	if !cached {
		patronInsertCacheMut.Lock()
		patronInsertCache[key] = cache
		patronInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Patron.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Patron) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	patronUpdateCacheMut.RLock()
	cache, cached := patronUpdateCache[key]
	patronUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			patronAllColumns,
			patronPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update patrons, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"patrons\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, patronPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(patronType, patronMapping, append(wl, patronPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update patrons row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for patrons")
	}

	if !cached {
		patronUpdateCacheMut.Lock()
		patronUpdateCache[key] = cache
		patronUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q patronQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for patrons")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for patrons")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o PatronSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), patronPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"patrons\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, patronPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in patron slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all patron")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Patron) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no patrons provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(patronColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	patronUpsertCacheMut.RLock()
	cache, cached := patronUpsertCache[key]
	patronUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			patronAllColumns,
			patronColumnsWithDefault,
			patronColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			patronAllColumns,
			patronPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert patrons, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(patronPrimaryKeyColumns))
			copy(conflict, patronPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"patrons\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(patronType, patronMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(patronType, patronMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert patrons")
	}

	if !cached {
		patronUpsertCacheMut.Lock()
		patronUpsertCache[key] = cache
		patronUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Patron record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Patron) Delete(ctx context.Context, exec boil.ContextExecutor, hardDelete bool) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Patron provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	var (
		sql  string
		args []interface{}
	)
	if hardDelete {
		args = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), patronPrimaryKeyMapping)
		sql = "DELETE FROM \"patrons\" WHERE \"id\"=$1"
	} else {
		currTime := time.Now().In(boil.GetLocation())
		o.DeletedAt = null.TimeFrom(currTime)
		wl := []string{"deleted_at"}
		sql = fmt.Sprintf("UPDATE \"patrons\" SET %s WHERE \"id\"=$2",
			strmangle.SetParamNames("\"", "\"", 1, wl),
		)
		valueMapping, err := queries.BindMapping(patronType, patronMapping, append(wl, patronPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
		args = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), valueMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from patrons")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for patrons")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q patronQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor, hardDelete bool) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no patronQuery provided for delete all")
	}

	if hardDelete {
		queries.SetDelete(q.Query)
	} else {
		currTime := time.Now().In(boil.GetLocation())
		queries.SetUpdate(q.Query, M{"deleted_at": currTime})
	}

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from patrons")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for patrons")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o PatronSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor, hardDelete bool) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(patronBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var (
		sql  string
		args []interface{}
	)
	if hardDelete {
		for _, obj := range o {
			pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), patronPrimaryKeyMapping)
			args = append(args, pkeyArgs...)
		}
		sql = "DELETE FROM \"patrons\" WHERE " +
			strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, patronPrimaryKeyColumns, len(o))
	} else {
		currTime := time.Now().In(boil.GetLocation())
		for _, obj := range o {
			pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), patronPrimaryKeyMapping)
			args = append(args, pkeyArgs...)
			obj.DeletedAt = null.TimeFrom(currTime)
		}
		wl := []string{"deleted_at"}
		sql = fmt.Sprintf("UPDATE \"patrons\" SET %s WHERE "+
			strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 2, patronPrimaryKeyColumns, len(o)),
			strmangle.SetParamNames("\"", "\"", 1, wl),
		)
		args = append([]interface{}{currTime}, args...)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from patron slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for patrons")
	}

	if len(patronAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Patron) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindPatron(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *PatronSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := PatronSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), patronPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"patrons\".* FROM \"patrons\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, patronPrimaryKeyColumns, len(*o)) +
		"and \"deleted_at\" is null"

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in PatronSlice")
	}

	*o = slice

	return nil
}

// PatronExists checks if the Patron row exists.
func PatronExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"patrons\" where \"id\"=$1 and \"deleted_at\" is null limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if patrons exists")
	}

	return exists, nil
}

// Exists checks if the Patron row exists.
func (o *Patron) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return PatronExists(ctx, exec, o.ID)
}
