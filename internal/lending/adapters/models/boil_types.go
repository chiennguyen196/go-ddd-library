// Code generated by SQLBoiler 4.14.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"strconv"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/strmangle"
)

// M type is for providing columns and column values to UpdateAll.
type M map[string]interface{}

// ErrSyncFail occurs during insert when the record could not be retrieved in
// order to populate default value information. This usually happens when LastInsertId
// fails or there was a primary key configuration that was not resolvable.
var ErrSyncFail = errors.New("models: failed to synchronize data after insert")

type insertCache struct {
	query        string
	retQuery     string
	valueMapping []uint64
	retMapping   []uint64
}

type updateCache struct {
	query        string
	valueMapping []uint64
}

func makeCacheKey(cols boil.Columns, nzDefaults []string) string {
	buf := strmangle.GetBuffer()

	buf.WriteString(strconv.Itoa(cols.Kind))
	for _, w := range cols.Cols {
		buf.WriteString(w)
	}

	if len(nzDefaults) != 0 {
		buf.WriteByte('.')
	}
	for _, nz := range nzDefaults {
		buf.WriteString(nz)
	}

	str := buf.String()
	strmangle.PutBuffer(buf)
	return str
}

type BookType string

// Enum values for BookType
const (
	BookTypeRestricted  BookType = "Restricted"
	BookTypeCirculating BookType = "Circulating"
)

func AllBookType() []BookType {
	return []BookType{
		BookTypeRestricted,
		BookTypeCirculating,
	}
}

func (e BookType) IsValid() error {
	switch e {
	case BookTypeRestricted, BookTypeCirculating:
		return nil
	default:
		return errors.New("enum is not valid")
	}
}

func (e BookType) String() string {
	return string(e)
}

type BookStatus string

// Enum values for BookStatus
const (
	BookStatusAvailable  BookStatus = "Available"
	BookStatusOnHold     BookStatus = "OnHold"
	BookStatusCheckedOut BookStatus = "CheckedOut"
)

func AllBookStatus() []BookStatus {
	return []BookStatus{
		BookStatusAvailable,
		BookStatusOnHold,
		BookStatusCheckedOut,
	}
}

func (e BookStatus) IsValid() error {
	switch e {
	case BookStatusAvailable, BookStatusOnHold, BookStatusCheckedOut:
		return nil
	default:
		return errors.New("enum is not valid")
	}
}

func (e BookStatus) String() string {
	return string(e)
}

type PatronType string

// Enum values for PatronType
const (
	PatronTypeRegular    PatronType = "Regular"
	PatronTypeResearcher PatronType = "Researcher"
)

func AllPatronType() []PatronType {
	return []PatronType{
		PatronTypeRegular,
		PatronTypeResearcher,
	}
}

func (e PatronType) IsValid() error {
	switch e {
	case PatronTypeRegular, PatronTypeResearcher:
		return nil
	default:
		return errors.New("enum is not valid")
	}
}

func (e PatronType) String() string {
	return string(e)
}
