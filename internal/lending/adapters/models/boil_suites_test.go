// Code generated by SQLBoiler 4.14.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import "testing"

// This test suite runs each operation test in parallel.
// Example, if your database has 3 tables, the suite will run:
// table1, table2 and table3 Delete in parallel
// table1, table2 and table3 Insert in parallel, and so forth.
// It does NOT run each operation group in parallel.
// Separating the tests thusly grants avoidance of Postgres deadlocks.
func TestParent(t *testing.T) {
	t.Run("Books", testBooks)
	t.Run("Holds", testHolds)
	t.Run("OverdueCheckouts", testOverdueCheckouts)
	t.Run("Patrons", testPatrons)
}

func TestSoftDelete(t *testing.T) {
	t.Run("Books", testBooksSoftDelete)
	t.Run("Holds", testHoldsSoftDelete)
	t.Run("OverdueCheckouts", testOverdueCheckoutsSoftDelete)
	t.Run("Patrons", testPatronsSoftDelete)
}

func TestQuerySoftDeleteAll(t *testing.T) {
	t.Run("Books", testBooksQuerySoftDeleteAll)
	t.Run("Holds", testHoldsQuerySoftDeleteAll)
	t.Run("OverdueCheckouts", testOverdueCheckoutsQuerySoftDeleteAll)
	t.Run("Patrons", testPatronsQuerySoftDeleteAll)
}

func TestSliceSoftDeleteAll(t *testing.T) {
	t.Run("Books", testBooksSliceSoftDeleteAll)
	t.Run("Holds", testHoldsSliceSoftDeleteAll)
	t.Run("OverdueCheckouts", testOverdueCheckoutsSliceSoftDeleteAll)
	t.Run("Patrons", testPatronsSliceSoftDeleteAll)
}

func TestDelete(t *testing.T) {
	t.Run("Books", testBooksDelete)
	t.Run("Holds", testHoldsDelete)
	t.Run("OverdueCheckouts", testOverdueCheckoutsDelete)
	t.Run("Patrons", testPatronsDelete)
}

func TestQueryDeleteAll(t *testing.T) {
	t.Run("Books", testBooksQueryDeleteAll)
	t.Run("Holds", testHoldsQueryDeleteAll)
	t.Run("OverdueCheckouts", testOverdueCheckoutsQueryDeleteAll)
	t.Run("Patrons", testPatronsQueryDeleteAll)
}

func TestSliceDeleteAll(t *testing.T) {
	t.Run("Books", testBooksSliceDeleteAll)
	t.Run("Holds", testHoldsSliceDeleteAll)
	t.Run("OverdueCheckouts", testOverdueCheckoutsSliceDeleteAll)
	t.Run("Patrons", testPatronsSliceDeleteAll)
}

func TestExists(t *testing.T) {
	t.Run("Books", testBooksExists)
	t.Run("Holds", testHoldsExists)
	t.Run("OverdueCheckouts", testOverdueCheckoutsExists)
	t.Run("Patrons", testPatronsExists)
}

func TestFind(t *testing.T) {
	t.Run("Books", testBooksFind)
	t.Run("Holds", testHoldsFind)
	t.Run("OverdueCheckouts", testOverdueCheckoutsFind)
	t.Run("Patrons", testPatronsFind)
}

func TestBind(t *testing.T) {
	t.Run("Books", testBooksBind)
	t.Run("Holds", testHoldsBind)
	t.Run("OverdueCheckouts", testOverdueCheckoutsBind)
	t.Run("Patrons", testPatronsBind)
}

func TestOne(t *testing.T) {
	t.Run("Books", testBooksOne)
	t.Run("Holds", testHoldsOne)
	t.Run("OverdueCheckouts", testOverdueCheckoutsOne)
	t.Run("Patrons", testPatronsOne)
}

func TestAll(t *testing.T) {
	t.Run("Books", testBooksAll)
	t.Run("Holds", testHoldsAll)
	t.Run("OverdueCheckouts", testOverdueCheckoutsAll)
	t.Run("Patrons", testPatronsAll)
}

func TestCount(t *testing.T) {
	t.Run("Books", testBooksCount)
	t.Run("Holds", testHoldsCount)
	t.Run("OverdueCheckouts", testOverdueCheckoutsCount)
	t.Run("Patrons", testPatronsCount)
}

func TestHooks(t *testing.T) {
	t.Run("Books", testBooksHooks)
	t.Run("Holds", testHoldsHooks)
	t.Run("OverdueCheckouts", testOverdueCheckoutsHooks)
	t.Run("Patrons", testPatronsHooks)
}

func TestInsert(t *testing.T) {
	t.Run("Books", testBooksInsert)
	t.Run("Books", testBooksInsertWhitelist)
	t.Run("Holds", testHoldsInsert)
	t.Run("Holds", testHoldsInsertWhitelist)
	t.Run("OverdueCheckouts", testOverdueCheckoutsInsert)
	t.Run("OverdueCheckouts", testOverdueCheckoutsInsertWhitelist)
	t.Run("Patrons", testPatronsInsert)
	t.Run("Patrons", testPatronsInsertWhitelist)
}

// TestToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestToOne(t *testing.T) {
	t.Run("HoldToPatronUsingPatron", testHoldToOnePatronUsingPatron)
	t.Run("OverdueCheckoutToPatronUsingPatron", testOverdueCheckoutToOnePatronUsingPatron)
}

// TestOneToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOne(t *testing.T) {}

// TestToMany tests cannot be run in parallel
// or deadlocks can occur.
func TestToMany(t *testing.T) {
	t.Run("PatronToHolds", testPatronToManyHolds)
	t.Run("PatronToOverdueCheckouts", testPatronToManyOverdueCheckouts)
}

// TestToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneSet(t *testing.T) {
	t.Run("HoldToPatronUsingHolds", testHoldToOneSetOpPatronUsingPatron)
	t.Run("OverdueCheckoutToPatronUsingOverdueCheckouts", testOverdueCheckoutToOneSetOpPatronUsingPatron)
}

// TestToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneRemove(t *testing.T) {}

// TestOneToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneSet(t *testing.T) {}

// TestOneToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneRemove(t *testing.T) {}

// TestToManyAdd tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyAdd(t *testing.T) {
	t.Run("PatronToHolds", testPatronToManyAddOpHolds)
	t.Run("PatronToOverdueCheckouts", testPatronToManyAddOpOverdueCheckouts)
}

// TestToManySet tests cannot be run in parallel
// or deadlocks can occur.
func TestToManySet(t *testing.T) {}

// TestToManyRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyRemove(t *testing.T) {}

func TestReload(t *testing.T) {
	t.Run("Books", testBooksReload)
	t.Run("Holds", testHoldsReload)
	t.Run("OverdueCheckouts", testOverdueCheckoutsReload)
	t.Run("Patrons", testPatronsReload)
}

func TestReloadAll(t *testing.T) {
	t.Run("Books", testBooksReloadAll)
	t.Run("Holds", testHoldsReloadAll)
	t.Run("OverdueCheckouts", testOverdueCheckoutsReloadAll)
	t.Run("Patrons", testPatronsReloadAll)
}

func TestSelect(t *testing.T) {
	t.Run("Books", testBooksSelect)
	t.Run("Holds", testHoldsSelect)
	t.Run("OverdueCheckouts", testOverdueCheckoutsSelect)
	t.Run("Patrons", testPatronsSelect)
}

func TestUpdate(t *testing.T) {
	t.Run("Books", testBooksUpdate)
	t.Run("Holds", testHoldsUpdate)
	t.Run("OverdueCheckouts", testOverdueCheckoutsUpdate)
	t.Run("Patrons", testPatronsUpdate)
}

func TestSliceUpdateAll(t *testing.T) {
	t.Run("Books", testBooksSliceUpdateAll)
	t.Run("Holds", testHoldsSliceUpdateAll)
	t.Run("OverdueCheckouts", testOverdueCheckoutsSliceUpdateAll)
	t.Run("Patrons", testPatronsSliceUpdateAll)
}
