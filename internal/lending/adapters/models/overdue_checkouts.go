// Code generated by SQLBoiler 4.14.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// OverdueCheckout is an object representing the database table.
type OverdueCheckout struct {
	ID              int64     `boil:"id" json:"id" toml:"id" yaml:"id"`
	PatronID        string    `boil:"patron_id" json:"patron_id" toml:"patron_id" yaml:"patron_id"`
	BookID          string    `boil:"book_id" json:"book_id" toml:"book_id" yaml:"book_id"`
	LibraryBranchID string    `boil:"library_branch_id" json:"library_branch_id" toml:"library_branch_id" yaml:"library_branch_id"`
	CreatedAt       time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt       time.Time `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	DeletedAt       null.Time `boil:"deleted_at" json:"deleted_at,omitempty" toml:"deleted_at" yaml:"deleted_at,omitempty"`

	R *overdueCheckoutR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L overdueCheckoutL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var OverdueCheckoutColumns = struct {
	ID              string
	PatronID        string
	BookID          string
	LibraryBranchID string
	CreatedAt       string
	UpdatedAt       string
	DeletedAt       string
}{
	ID:              "id",
	PatronID:        "patron_id",
	BookID:          "book_id",
	LibraryBranchID: "library_branch_id",
	CreatedAt:       "created_at",
	UpdatedAt:       "updated_at",
	DeletedAt:       "deleted_at",
}

var OverdueCheckoutTableColumns = struct {
	ID              string
	PatronID        string
	BookID          string
	LibraryBranchID string
	CreatedAt       string
	UpdatedAt       string
	DeletedAt       string
}{
	ID:              "overdue_checkouts.id",
	PatronID:        "overdue_checkouts.patron_id",
	BookID:          "overdue_checkouts.book_id",
	LibraryBranchID: "overdue_checkouts.library_branch_id",
	CreatedAt:       "overdue_checkouts.created_at",
	UpdatedAt:       "overdue_checkouts.updated_at",
	DeletedAt:       "overdue_checkouts.deleted_at",
}

// Generated where

var OverdueCheckoutWhere = struct {
	ID              whereHelperint64
	PatronID        whereHelperstring
	BookID          whereHelperstring
	LibraryBranchID whereHelperstring
	CreatedAt       whereHelpertime_Time
	UpdatedAt       whereHelpertime_Time
	DeletedAt       whereHelpernull_Time
}{
	ID:              whereHelperint64{field: "\"overdue_checkouts\".\"id\""},
	PatronID:        whereHelperstring{field: "\"overdue_checkouts\".\"patron_id\""},
	BookID:          whereHelperstring{field: "\"overdue_checkouts\".\"book_id\""},
	LibraryBranchID: whereHelperstring{field: "\"overdue_checkouts\".\"library_branch_id\""},
	CreatedAt:       whereHelpertime_Time{field: "\"overdue_checkouts\".\"created_at\""},
	UpdatedAt:       whereHelpertime_Time{field: "\"overdue_checkouts\".\"updated_at\""},
	DeletedAt:       whereHelpernull_Time{field: "\"overdue_checkouts\".\"deleted_at\""},
}

// OverdueCheckoutRels is where relationship names are stored.
var OverdueCheckoutRels = struct {
	Patron string
}{
	Patron: "Patron",
}

// overdueCheckoutR is where relationships are stored.
type overdueCheckoutR struct {
	Patron *Patron `boil:"Patron" json:"Patron" toml:"Patron" yaml:"Patron"`
}

// NewStruct creates a new relationship struct
func (*overdueCheckoutR) NewStruct() *overdueCheckoutR {
	return &overdueCheckoutR{}
}

func (r *overdueCheckoutR) GetPatron() *Patron {
	if r == nil {
		return nil
	}
	return r.Patron
}

// overdueCheckoutL is where Load methods for each relationship are stored.
type overdueCheckoutL struct{}

var (
	overdueCheckoutAllColumns            = []string{"id", "patron_id", "book_id", "library_branch_id", "created_at", "updated_at", "deleted_at"}
	overdueCheckoutColumnsWithoutDefault = []string{"patron_id", "book_id", "library_branch_id"}
	overdueCheckoutColumnsWithDefault    = []string{"id", "created_at", "updated_at", "deleted_at"}
	overdueCheckoutPrimaryKeyColumns     = []string{"id"}
	overdueCheckoutGeneratedColumns      = []string{}
)

type (
	// OverdueCheckoutSlice is an alias for a slice of pointers to OverdueCheckout.
	// This should almost always be used instead of []OverdueCheckout.
	OverdueCheckoutSlice []*OverdueCheckout
	// OverdueCheckoutHook is the signature for custom OverdueCheckout hook methods
	OverdueCheckoutHook func(context.Context, boil.ContextExecutor, *OverdueCheckout) error

	overdueCheckoutQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	overdueCheckoutType                 = reflect.TypeOf(&OverdueCheckout{})
	overdueCheckoutMapping              = queries.MakeStructMapping(overdueCheckoutType)
	overdueCheckoutPrimaryKeyMapping, _ = queries.BindMapping(overdueCheckoutType, overdueCheckoutMapping, overdueCheckoutPrimaryKeyColumns)
	overdueCheckoutInsertCacheMut       sync.RWMutex
	overdueCheckoutInsertCache          = make(map[string]insertCache)
	overdueCheckoutUpdateCacheMut       sync.RWMutex
	overdueCheckoutUpdateCache          = make(map[string]updateCache)
	overdueCheckoutUpsertCacheMut       sync.RWMutex
	overdueCheckoutUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var overdueCheckoutAfterSelectHooks []OverdueCheckoutHook

var overdueCheckoutBeforeInsertHooks []OverdueCheckoutHook
var overdueCheckoutAfterInsertHooks []OverdueCheckoutHook

var overdueCheckoutBeforeUpdateHooks []OverdueCheckoutHook
var overdueCheckoutAfterUpdateHooks []OverdueCheckoutHook

var overdueCheckoutBeforeDeleteHooks []OverdueCheckoutHook
var overdueCheckoutAfterDeleteHooks []OverdueCheckoutHook

var overdueCheckoutBeforeUpsertHooks []OverdueCheckoutHook
var overdueCheckoutAfterUpsertHooks []OverdueCheckoutHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *OverdueCheckout) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range overdueCheckoutAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *OverdueCheckout) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range overdueCheckoutBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *OverdueCheckout) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range overdueCheckoutAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *OverdueCheckout) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range overdueCheckoutBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *OverdueCheckout) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range overdueCheckoutAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *OverdueCheckout) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range overdueCheckoutBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *OverdueCheckout) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range overdueCheckoutAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *OverdueCheckout) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range overdueCheckoutBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *OverdueCheckout) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range overdueCheckoutAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddOverdueCheckoutHook registers your hook function for all future operations.
func AddOverdueCheckoutHook(hookPoint boil.HookPoint, overdueCheckoutHook OverdueCheckoutHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		overdueCheckoutAfterSelectHooks = append(overdueCheckoutAfterSelectHooks, overdueCheckoutHook)
	case boil.BeforeInsertHook:
		overdueCheckoutBeforeInsertHooks = append(overdueCheckoutBeforeInsertHooks, overdueCheckoutHook)
	case boil.AfterInsertHook:
		overdueCheckoutAfterInsertHooks = append(overdueCheckoutAfterInsertHooks, overdueCheckoutHook)
	case boil.BeforeUpdateHook:
		overdueCheckoutBeforeUpdateHooks = append(overdueCheckoutBeforeUpdateHooks, overdueCheckoutHook)
	case boil.AfterUpdateHook:
		overdueCheckoutAfterUpdateHooks = append(overdueCheckoutAfterUpdateHooks, overdueCheckoutHook)
	case boil.BeforeDeleteHook:
		overdueCheckoutBeforeDeleteHooks = append(overdueCheckoutBeforeDeleteHooks, overdueCheckoutHook)
	case boil.AfterDeleteHook:
		overdueCheckoutAfterDeleteHooks = append(overdueCheckoutAfterDeleteHooks, overdueCheckoutHook)
	case boil.BeforeUpsertHook:
		overdueCheckoutBeforeUpsertHooks = append(overdueCheckoutBeforeUpsertHooks, overdueCheckoutHook)
	case boil.AfterUpsertHook:
		overdueCheckoutAfterUpsertHooks = append(overdueCheckoutAfterUpsertHooks, overdueCheckoutHook)
	}
}

// One returns a single overdueCheckout record from the query.
func (q overdueCheckoutQuery) One(ctx context.Context, exec boil.ContextExecutor) (*OverdueCheckout, error) {
	o := &OverdueCheckout{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for overdue_checkouts")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all OverdueCheckout records from the query.
func (q overdueCheckoutQuery) All(ctx context.Context, exec boil.ContextExecutor) (OverdueCheckoutSlice, error) {
	var o []*OverdueCheckout

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to OverdueCheckout slice")
	}

	if len(overdueCheckoutAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all OverdueCheckout records in the query.
func (q overdueCheckoutQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count overdue_checkouts rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q overdueCheckoutQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if overdue_checkouts exists")
	}

	return count > 0, nil
}

// Patron pointed to by the foreign key.
func (o *OverdueCheckout) Patron(mods ...qm.QueryMod) patronQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.PatronID),
	}

	queryMods = append(queryMods, mods...)

	return Patrons(queryMods...)
}

// LoadPatron allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (overdueCheckoutL) LoadPatron(ctx context.Context, e boil.ContextExecutor, singular bool, maybeOverdueCheckout interface{}, mods queries.Applicator) error {
	var slice []*OverdueCheckout
	var object *OverdueCheckout

	if singular {
		var ok bool
		object, ok = maybeOverdueCheckout.(*OverdueCheckout)
		if !ok {
			object = new(OverdueCheckout)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeOverdueCheckout)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeOverdueCheckout))
			}
		}
	} else {
		s, ok := maybeOverdueCheckout.(*[]*OverdueCheckout)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeOverdueCheckout)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeOverdueCheckout))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &overdueCheckoutR{}
		}
		args = append(args, object.PatronID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &overdueCheckoutR{}
			}

			for _, a := range args {
				if a == obj.PatronID {
					continue Outer
				}
			}

			args = append(args, obj.PatronID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`patrons`),
		qm.WhereIn(`patrons.id in ?`, args...),
		qmhelper.WhereIsNull(`patrons.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Patron")
	}

	var resultSlice []*Patron
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Patron")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for patrons")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for patrons")
	}

	if len(patronAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Patron = foreign
		if foreign.R == nil {
			foreign.R = &patronR{}
		}
		foreign.R.OverdueCheckouts = append(foreign.R.OverdueCheckouts, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.PatronID == foreign.ID {
				local.R.Patron = foreign
				if foreign.R == nil {
					foreign.R = &patronR{}
				}
				foreign.R.OverdueCheckouts = append(foreign.R.OverdueCheckouts, local)
				break
			}
		}
	}

	return nil
}

// SetPatron of the overdueCheckout to the related item.
// Sets o.R.Patron to related.
// Adds o to related.R.OverdueCheckouts.
func (o *OverdueCheckout) SetPatron(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Patron) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"overdue_checkouts\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"patron_id"}),
		strmangle.WhereClause("\"", "\"", 2, overdueCheckoutPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.PatronID = related.ID
	if o.R == nil {
		o.R = &overdueCheckoutR{
			Patron: related,
		}
	} else {
		o.R.Patron = related
	}

	if related.R == nil {
		related.R = &patronR{
			OverdueCheckouts: OverdueCheckoutSlice{o},
		}
	} else {
		related.R.OverdueCheckouts = append(related.R.OverdueCheckouts, o)
	}

	return nil
}

// OverdueCheckouts retrieves all the records using an executor.
func OverdueCheckouts(mods ...qm.QueryMod) overdueCheckoutQuery {
	mods = append(mods, qm.From("\"overdue_checkouts\""), qmhelper.WhereIsNull("\"overdue_checkouts\".\"deleted_at\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"overdue_checkouts\".*"})
	}

	return overdueCheckoutQuery{q}
}

// FindOverdueCheckout retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindOverdueCheckout(ctx context.Context, exec boil.ContextExecutor, iD int64, selectCols ...string) (*OverdueCheckout, error) {
	overdueCheckoutObj := &OverdueCheckout{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"overdue_checkouts\" where \"id\"=$1 and \"deleted_at\" is null", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, overdueCheckoutObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from overdue_checkouts")
	}

	if err = overdueCheckoutObj.doAfterSelectHooks(ctx, exec); err != nil {
		return overdueCheckoutObj, err
	}

	return overdueCheckoutObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *OverdueCheckout) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no overdue_checkouts provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(overdueCheckoutColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	overdueCheckoutInsertCacheMut.RLock()
	cache, cached := overdueCheckoutInsertCache[key]
	overdueCheckoutInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			overdueCheckoutAllColumns,
			overdueCheckoutColumnsWithDefault,
			overdueCheckoutColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(overdueCheckoutType, overdueCheckoutMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(overdueCheckoutType, overdueCheckoutMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"overdue_checkouts\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"overdue_checkouts\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into overdue_checkouts")
	}

	if !cached {
		overdueCheckoutInsertCacheMut.Lock()
		overdueCheckoutInsertCache[key] = cache
		overdueCheckoutInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the OverdueCheckout.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *OverdueCheckout) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	overdueCheckoutUpdateCacheMut.RLock()
	cache, cached := overdueCheckoutUpdateCache[key]
	overdueCheckoutUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			overdueCheckoutAllColumns,
			overdueCheckoutPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update overdue_checkouts, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"overdue_checkouts\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, overdueCheckoutPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(overdueCheckoutType, overdueCheckoutMapping, append(wl, overdueCheckoutPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update overdue_checkouts row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for overdue_checkouts")
	}

	if !cached {
		overdueCheckoutUpdateCacheMut.Lock()
		overdueCheckoutUpdateCache[key] = cache
		overdueCheckoutUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q overdueCheckoutQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for overdue_checkouts")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for overdue_checkouts")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o OverdueCheckoutSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), overdueCheckoutPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"overdue_checkouts\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, overdueCheckoutPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in overdueCheckout slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all overdueCheckout")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *OverdueCheckout) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no overdue_checkouts provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(overdueCheckoutColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	overdueCheckoutUpsertCacheMut.RLock()
	cache, cached := overdueCheckoutUpsertCache[key]
	overdueCheckoutUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			overdueCheckoutAllColumns,
			overdueCheckoutColumnsWithDefault,
			overdueCheckoutColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			overdueCheckoutAllColumns,
			overdueCheckoutPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert overdue_checkouts, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(overdueCheckoutPrimaryKeyColumns))
			copy(conflict, overdueCheckoutPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"overdue_checkouts\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(overdueCheckoutType, overdueCheckoutMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(overdueCheckoutType, overdueCheckoutMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert overdue_checkouts")
	}

	if !cached {
		overdueCheckoutUpsertCacheMut.Lock()
		overdueCheckoutUpsertCache[key] = cache
		overdueCheckoutUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single OverdueCheckout record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *OverdueCheckout) Delete(ctx context.Context, exec boil.ContextExecutor, hardDelete bool) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no OverdueCheckout provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	var (
		sql  string
		args []interface{}
	)
	if hardDelete {
		args = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), overdueCheckoutPrimaryKeyMapping)
		sql = "DELETE FROM \"overdue_checkouts\" WHERE \"id\"=$1"
	} else {
		currTime := time.Now().In(boil.GetLocation())
		o.DeletedAt = null.TimeFrom(currTime)
		wl := []string{"deleted_at"}
		sql = fmt.Sprintf("UPDATE \"overdue_checkouts\" SET %s WHERE \"id\"=$2",
			strmangle.SetParamNames("\"", "\"", 1, wl),
		)
		valueMapping, err := queries.BindMapping(overdueCheckoutType, overdueCheckoutMapping, append(wl, overdueCheckoutPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
		args = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), valueMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from overdue_checkouts")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for overdue_checkouts")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q overdueCheckoutQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor, hardDelete bool) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no overdueCheckoutQuery provided for delete all")
	}

	if hardDelete {
		queries.SetDelete(q.Query)
	} else {
		currTime := time.Now().In(boil.GetLocation())
		queries.SetUpdate(q.Query, M{"deleted_at": currTime})
	}

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from overdue_checkouts")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for overdue_checkouts")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o OverdueCheckoutSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor, hardDelete bool) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(overdueCheckoutBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var (
		sql  string
		args []interface{}
	)
	if hardDelete {
		for _, obj := range o {
			pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), overdueCheckoutPrimaryKeyMapping)
			args = append(args, pkeyArgs...)
		}
		sql = "DELETE FROM \"overdue_checkouts\" WHERE " +
			strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, overdueCheckoutPrimaryKeyColumns, len(o))
	} else {
		currTime := time.Now().In(boil.GetLocation())
		for _, obj := range o {
			pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), overdueCheckoutPrimaryKeyMapping)
			args = append(args, pkeyArgs...)
			obj.DeletedAt = null.TimeFrom(currTime)
		}
		wl := []string{"deleted_at"}
		sql = fmt.Sprintf("UPDATE \"overdue_checkouts\" SET %s WHERE "+
			strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 2, overdueCheckoutPrimaryKeyColumns, len(o)),
			strmangle.SetParamNames("\"", "\"", 1, wl),
		)
		args = append([]interface{}{currTime}, args...)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from overdueCheckout slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for overdue_checkouts")
	}

	if len(overdueCheckoutAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *OverdueCheckout) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindOverdueCheckout(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *OverdueCheckoutSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := OverdueCheckoutSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), overdueCheckoutPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"overdue_checkouts\".* FROM \"overdue_checkouts\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, overdueCheckoutPrimaryKeyColumns, len(*o)) +
		"and \"deleted_at\" is null"

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in OverdueCheckoutSlice")
	}

	*o = slice

	return nil
}

// OverdueCheckoutExists checks if the OverdueCheckout row exists.
func OverdueCheckoutExists(ctx context.Context, exec boil.ContextExecutor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"overdue_checkouts\" where \"id\"=$1 and \"deleted_at\" is null limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if overdue_checkouts exists")
	}

	return exists, nil
}

// Exists checks if the OverdueCheckout row exists.
func (o *OverdueCheckout) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return OverdueCheckoutExists(ctx, exec, o.ID)
}
