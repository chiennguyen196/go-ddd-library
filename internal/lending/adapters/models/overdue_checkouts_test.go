// Code generated by SQLBoiler 4.14.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testOverdueCheckouts(t *testing.T) {
	t.Parallel()

	query := OverdueCheckouts()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testOverdueCheckoutsSoftDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &OverdueCheckout{}
	if err = randomize.Struct(seed, o, overdueCheckoutDBTypes, true, overdueCheckoutColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OverdueCheckout struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx, false); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := OverdueCheckouts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testOverdueCheckoutsQuerySoftDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &OverdueCheckout{}
	if err = randomize.Struct(seed, o, overdueCheckoutDBTypes, true, overdueCheckoutColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OverdueCheckout struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := OverdueCheckouts().DeleteAll(ctx, tx, false); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := OverdueCheckouts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testOverdueCheckoutsSliceSoftDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &OverdueCheckout{}
	if err = randomize.Struct(seed, o, overdueCheckoutDBTypes, true, overdueCheckoutColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OverdueCheckout struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := OverdueCheckoutSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx, false); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := OverdueCheckouts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testOverdueCheckoutsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &OverdueCheckout{}
	if err = randomize.Struct(seed, o, overdueCheckoutDBTypes, true, overdueCheckoutColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OverdueCheckout struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx, true); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := OverdueCheckouts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testOverdueCheckoutsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &OverdueCheckout{}
	if err = randomize.Struct(seed, o, overdueCheckoutDBTypes, true, overdueCheckoutColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OverdueCheckout struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := OverdueCheckouts().DeleteAll(ctx, tx, true); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := OverdueCheckouts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testOverdueCheckoutsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &OverdueCheckout{}
	if err = randomize.Struct(seed, o, overdueCheckoutDBTypes, true, overdueCheckoutColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OverdueCheckout struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := OverdueCheckoutSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx, true); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := OverdueCheckouts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testOverdueCheckoutsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &OverdueCheckout{}
	if err = randomize.Struct(seed, o, overdueCheckoutDBTypes, true, overdueCheckoutColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OverdueCheckout struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := OverdueCheckoutExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if OverdueCheckout exists: %s", err)
	}
	if !e {
		t.Errorf("Expected OverdueCheckoutExists to return true, but got false.")
	}
}

func testOverdueCheckoutsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &OverdueCheckout{}
	if err = randomize.Struct(seed, o, overdueCheckoutDBTypes, true, overdueCheckoutColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OverdueCheckout struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	overdueCheckoutFound, err := FindOverdueCheckout(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if overdueCheckoutFound == nil {
		t.Error("want a record, got nil")
	}
}

func testOverdueCheckoutsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &OverdueCheckout{}
	if err = randomize.Struct(seed, o, overdueCheckoutDBTypes, true, overdueCheckoutColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OverdueCheckout struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = OverdueCheckouts().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testOverdueCheckoutsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &OverdueCheckout{}
	if err = randomize.Struct(seed, o, overdueCheckoutDBTypes, true, overdueCheckoutColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OverdueCheckout struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := OverdueCheckouts().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testOverdueCheckoutsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	overdueCheckoutOne := &OverdueCheckout{}
	overdueCheckoutTwo := &OverdueCheckout{}
	if err = randomize.Struct(seed, overdueCheckoutOne, overdueCheckoutDBTypes, false, overdueCheckoutColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OverdueCheckout struct: %s", err)
	}
	if err = randomize.Struct(seed, overdueCheckoutTwo, overdueCheckoutDBTypes, false, overdueCheckoutColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OverdueCheckout struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = overdueCheckoutOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = overdueCheckoutTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := OverdueCheckouts().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testOverdueCheckoutsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	overdueCheckoutOne := &OverdueCheckout{}
	overdueCheckoutTwo := &OverdueCheckout{}
	if err = randomize.Struct(seed, overdueCheckoutOne, overdueCheckoutDBTypes, false, overdueCheckoutColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OverdueCheckout struct: %s", err)
	}
	if err = randomize.Struct(seed, overdueCheckoutTwo, overdueCheckoutDBTypes, false, overdueCheckoutColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OverdueCheckout struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = overdueCheckoutOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = overdueCheckoutTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := OverdueCheckouts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func overdueCheckoutBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *OverdueCheckout) error {
	*o = OverdueCheckout{}
	return nil
}

func overdueCheckoutAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *OverdueCheckout) error {
	*o = OverdueCheckout{}
	return nil
}

func overdueCheckoutAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *OverdueCheckout) error {
	*o = OverdueCheckout{}
	return nil
}

func overdueCheckoutBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *OverdueCheckout) error {
	*o = OverdueCheckout{}
	return nil
}

func overdueCheckoutAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *OverdueCheckout) error {
	*o = OverdueCheckout{}
	return nil
}

func overdueCheckoutBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *OverdueCheckout) error {
	*o = OverdueCheckout{}
	return nil
}

func overdueCheckoutAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *OverdueCheckout) error {
	*o = OverdueCheckout{}
	return nil
}

func overdueCheckoutBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *OverdueCheckout) error {
	*o = OverdueCheckout{}
	return nil
}

func overdueCheckoutAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *OverdueCheckout) error {
	*o = OverdueCheckout{}
	return nil
}

func testOverdueCheckoutsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &OverdueCheckout{}
	o := &OverdueCheckout{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, overdueCheckoutDBTypes, false); err != nil {
		t.Errorf("Unable to randomize OverdueCheckout object: %s", err)
	}

	AddOverdueCheckoutHook(boil.BeforeInsertHook, overdueCheckoutBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	overdueCheckoutBeforeInsertHooks = []OverdueCheckoutHook{}

	AddOverdueCheckoutHook(boil.AfterInsertHook, overdueCheckoutAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	overdueCheckoutAfterInsertHooks = []OverdueCheckoutHook{}

	AddOverdueCheckoutHook(boil.AfterSelectHook, overdueCheckoutAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	overdueCheckoutAfterSelectHooks = []OverdueCheckoutHook{}

	AddOverdueCheckoutHook(boil.BeforeUpdateHook, overdueCheckoutBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	overdueCheckoutBeforeUpdateHooks = []OverdueCheckoutHook{}

	AddOverdueCheckoutHook(boil.AfterUpdateHook, overdueCheckoutAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	overdueCheckoutAfterUpdateHooks = []OverdueCheckoutHook{}

	AddOverdueCheckoutHook(boil.BeforeDeleteHook, overdueCheckoutBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	overdueCheckoutBeforeDeleteHooks = []OverdueCheckoutHook{}

	AddOverdueCheckoutHook(boil.AfterDeleteHook, overdueCheckoutAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	overdueCheckoutAfterDeleteHooks = []OverdueCheckoutHook{}

	AddOverdueCheckoutHook(boil.BeforeUpsertHook, overdueCheckoutBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	overdueCheckoutBeforeUpsertHooks = []OverdueCheckoutHook{}

	AddOverdueCheckoutHook(boil.AfterUpsertHook, overdueCheckoutAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	overdueCheckoutAfterUpsertHooks = []OverdueCheckoutHook{}
}

func testOverdueCheckoutsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &OverdueCheckout{}
	if err = randomize.Struct(seed, o, overdueCheckoutDBTypes, true, overdueCheckoutColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OverdueCheckout struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := OverdueCheckouts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testOverdueCheckoutsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &OverdueCheckout{}
	if err = randomize.Struct(seed, o, overdueCheckoutDBTypes, true); err != nil {
		t.Errorf("Unable to randomize OverdueCheckout struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(overdueCheckoutColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := OverdueCheckouts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testOverdueCheckoutToOnePatronUsingPatron(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local OverdueCheckout
	var foreign Patron

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, overdueCheckoutDBTypes, false, overdueCheckoutColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OverdueCheckout struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, patronDBTypes, false, patronColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Patron struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.PatronID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Patron().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	ranAfterSelectHook := false
	AddPatronHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *Patron) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := OverdueCheckoutSlice{&local}
	if err = local.L.LoadPatron(ctx, tx, false, (*[]*OverdueCheckout)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Patron == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Patron = nil
	if err = local.L.LoadPatron(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Patron == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testOverdueCheckoutToOneSetOpPatronUsingPatron(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a OverdueCheckout
	var b, c Patron

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, overdueCheckoutDBTypes, false, strmangle.SetComplement(overdueCheckoutPrimaryKeyColumns, overdueCheckoutColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, patronDBTypes, false, strmangle.SetComplement(patronPrimaryKeyColumns, patronColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, patronDBTypes, false, strmangle.SetComplement(patronPrimaryKeyColumns, patronColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Patron{&b, &c} {
		err = a.SetPatron(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Patron != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.OverdueCheckouts[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.PatronID != x.ID {
			t.Error("foreign key was wrong value", a.PatronID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.PatronID))
		reflect.Indirect(reflect.ValueOf(&a.PatronID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.PatronID != x.ID {
			t.Error("foreign key was wrong value", a.PatronID, x.ID)
		}
	}
}

func testOverdueCheckoutsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &OverdueCheckout{}
	if err = randomize.Struct(seed, o, overdueCheckoutDBTypes, true, overdueCheckoutColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OverdueCheckout struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testOverdueCheckoutsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &OverdueCheckout{}
	if err = randomize.Struct(seed, o, overdueCheckoutDBTypes, true, overdueCheckoutColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OverdueCheckout struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := OverdueCheckoutSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testOverdueCheckoutsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &OverdueCheckout{}
	if err = randomize.Struct(seed, o, overdueCheckoutDBTypes, true, overdueCheckoutColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OverdueCheckout struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := OverdueCheckouts().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	overdueCheckoutDBTypes = map[string]string{`ID`: `bigint`, `PatronID`: `character varying`, `BookID`: `uuid`, `LibraryBranchID`: `uuid`, `CreatedAt`: `timestamp without time zone`, `UpdatedAt`: `timestamp without time zone`, `DeletedAt`: `timestamp without time zone`}
	_                      = bytes.MinRead
)

func testOverdueCheckoutsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(overdueCheckoutPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(overdueCheckoutAllColumns) == len(overdueCheckoutPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &OverdueCheckout{}
	if err = randomize.Struct(seed, o, overdueCheckoutDBTypes, true, overdueCheckoutColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OverdueCheckout struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := OverdueCheckouts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, overdueCheckoutDBTypes, true, overdueCheckoutPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize OverdueCheckout struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testOverdueCheckoutsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(overdueCheckoutAllColumns) == len(overdueCheckoutPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &OverdueCheckout{}
	if err = randomize.Struct(seed, o, overdueCheckoutDBTypes, true, overdueCheckoutColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OverdueCheckout struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := OverdueCheckouts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, overdueCheckoutDBTypes, true, overdueCheckoutPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize OverdueCheckout struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(overdueCheckoutAllColumns, overdueCheckoutPrimaryKeyColumns) {
		fields = overdueCheckoutAllColumns
	} else {
		fields = strmangle.SetComplement(
			overdueCheckoutAllColumns,
			overdueCheckoutPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := OverdueCheckoutSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testOverdueCheckoutsUpsert(t *testing.T) {
	t.Parallel()

	if len(overdueCheckoutAllColumns) == len(overdueCheckoutPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := OverdueCheckout{}
	if err = randomize.Struct(seed, &o, overdueCheckoutDBTypes, true); err != nil {
		t.Errorf("Unable to randomize OverdueCheckout struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert OverdueCheckout: %s", err)
	}

	count, err := OverdueCheckouts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, overdueCheckoutDBTypes, false, overdueCheckoutPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize OverdueCheckout struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert OverdueCheckout: %s", err)
	}

	count, err = OverdueCheckouts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
